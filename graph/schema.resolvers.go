package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"mblydenburgh/poc/go-graph/graph/model"

	"github.com/google/uuid"
)

// UpsertUser is the resolver for the upsertUser field.
func (r *mutationResolver) UpsertUser(ctx context.Context, input model.UpdateUser) (*model.User, error) {
	// print start of function
	fmt.Println("UpsertUser")
	user := &model.User{}
	id := input.ID
	fmt.Println("id: ", id)
	email := input.Email
	displayName := input.DisplayName
	integrations := input.Integrations
	products := input.Products
	roles := input.Roles

	if email != nil {
		fmt.Println("email: ", email)
		user.Email = *email
	}
	fmt.Println("set email success")
	if displayName != nil {
		fmt.Println("displayName: ", displayName)
		user.DisplayName = *displayName
	}
	fmt.Println("set displayName success")
	if integrations != nil {
		fmt.Println("integrations: ", integrations)
		user.Integrations = integrations
	}
	fmt.Println("set integrations success")
	if products != nil {
		fmt.Println("products: ", products)
		user.Products = products
	}
	fmt.Println("set products success")
	if roles != nil {
		fmt.Println("roles: ", roles)
		user.Roles = roles
	}

	fmt.Println("adding user: ", user)

	usersLength := len(r.UserStore)
	fmt.Println("usersLength: ", usersLength)
	if usersLength == 0 {
		fmt.Println("UserStore is empty")
		r.UserStore = make(map[string]model.User)
	}
	if id != nil {
		_, ok := r.UserStore[*id]
		if !ok {
			return nil, fmt.Errorf("User with id %s not found", *id)
		}
		r.UserStore[*id] = *user
	} else {
		user.ID = uuid.NewString()
		r.UserStore[user.ID] = *user
	}

	return user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users := r.UserStore
	res := make([]*model.User, 0, len(users))
	for _, v := range users {
		res = append(res, &v)
	}
	return res, nil
}

func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user, ok := r.UserStore[id]
	if !ok {
		return nil, fmt.Errorf("user not found")
	}
	return &user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
